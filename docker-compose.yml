name: microservices
services:
  frontend:
    container_name: frontend
    build: ./frontend
    ports:
      - "127.0.0.1:5000:5000"
    networks:
      - host
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    develop:
      watch:
        - action: sync
          path: ./frontend
          target: /app

  backend:
    container_name: proxy
    build: ./backend/src/proxy/
    ports:
      - "127.0.0.1:8000:8000"
    volumes:
      - ./backend/src/proxy:/app
    networks:
      - host
      - backend
    restart: unless-stopped
    healthcheck:
      test: if [ $(curl -LI http://127.0.0.1:8000/api/health -o /dev/null -w '%{http_code}\n' -s) == "200" ]; then echo 0; fi || exit 1
      interval: 10s
      timeout: 5s
      start_period: 60s
      retries: 5
    depends_on:
      auth-service:
        condition: service_healthy
      events-service:
        condition: service_healthy
      invites-service:
        condition: service_healthy
      rsvp-service:
        condition: service_healthy
      calendars-service:
        condition: service_healthy

  auth-service:
    container_name: auth-service
    build: ./backend/src/services/auth/
    ports:
      - "127.0.0.1:8001:8000"
    volumes:
      - ./backend/src/services/auth:/auth
    networks:
      - backend
      - auth-db
    healthcheck:
      test: if [ $(curl -LI http://127.0.0.1:8000/api/health -o /dev/null -w '%{http_code}\n' -s) == "200" ]; then echo 0; fi || exit 1
      interval: 10s
      timeout: 5s
      start_period: 60s
      retries: 5
    restart: on-failure:5
    depends_on:
      auth-db:
        condition: service_healthy
    environment:
      - AUTH_DB_HOST=${AUTH_DB_HOST}
      - AUTH_DB_NAME=${AUTH_DB_NAME}
      - AUTH_DB_USER=${APP_DB_USER}
      - AUTH_DB_PASSWORD=${APP_DB_PASSWORD}
      - AUTH_DB_PORT=5432

  events-service:
    container_name: events-service
    build: ./backend/src/services/events/
    ports:
      - "127.0.0.1:8002:8000"
    volumes:
      - ./backend/src/services/events:/events
    networks:
      - backend
      - events-db
    healthcheck:
      test: if [ $(curl -LI http://127.0.0.1:8000/api/health -o /dev/null -w '%{http_code}\n' -s) == "200" ]; then echo 0; fi || exit 1
      interval: 10s
      timeout: 5s
      start_period: 60s
      retries: 5
    restart: on-failure:5
    depends_on:
      events-db:
        condition: service_healthy
    environment:
      - EVENTS_DB_HOST=${EVENTS_DB_HOST}
      - EVENTS_DB_NAME=${EVENTS_DB_NAME}
      - EVENTS_DB_USER=${APP_DB_USER}
      - EVENTS_DB_PASSWORD=${APP_DB_PASSWORD}
      - EVENTS_DB_PORT=5432

  invites-service:
    container_name: invites-service
    build: ./backend/src/services/invites/
    ports:
      - "127.0.0.1:8003:8000"
    volumes:
      - ./backend/src/services/invites:/invites
    networks:
      - backend
      - invites-db
    restart: on-failure:5
    healthcheck:
      test: if [ $(curl -LI http://127.0.0.1:8000/api/health -o /dev/null -w '%{http_code}\n' -s) == "200" ]; then echo 0; fi || exit 1
      interval: 10s
      timeout: 5s
      start_period: 60s
      retries: 5
    depends_on:
      invites-db:
        condition: service_healthy
    environment:
      - INVITES_DB_HOST=${INVITES_DB_HOST}
      - INVITES_DB_NAME=${INVITES_DB_NAME}
      - INVITES_DB_USER=${APP_DB_USER}
      - INVITES_DB_PASSWORD=${APP_DB_PASSWORD}
      - INVITES_DB_PORT=5432

  rsvp-service:
    container_name: rsvp-service
    build: ./backend/src/services/rsvp/
    ports:
      - "127.0.0.1:8004:8000"
    volumes:
      - ./backend/src/services/rsvp:/rsvp
    networks:
      - backend
      - rsvp-db
    restart: on-failure:5
    healthcheck:
      test: if [ $(curl -LI http://127.0.0.1:8000/api/health -o /dev/null -w '%{http_code}\n' -s) == "200" ]; then echo 0; fi || exit 1
      interval: 10s
      timeout: 5s
      start_period: 60s
      retries: 5
    depends_on:
      rsvp-db:
        condition: service_healthy
    environment:
      - RSVP_DB_HOST=${RSVP_DB_HOST}
      - RSVP_DB_NAME=${RSVP_DB_NAME}
      - RSVP_DB_USER=${APP_DB_USER}
      - RSVP_DB_PASSWORD=${APP_DB_PASSWORD}
      - RSVP_DB_PORT=5432

  calendars-service:
    container_name: calendars-service
    build: ./backend/src/services/calendars/
    ports:
      - "127.0.0.1:8005:8000"
    volumes:
      - ./backend/src/services/calendars:/calendars
    networks:
      - backend
      - calendars-db
    restart: on-failure:5
    healthcheck:
      test: if [ $(curl -LI http://127.0.0.1:8000/api/health -o /dev/null -w '%{http_code}\n' -s) == "200" ]; then echo 0; fi || exit 1
      interval: 10s
      timeout: 5s
      start_period: 60s
      retries: 5
    depends_on:
      calendars-db:
        condition: service_healthy
    environment:
      - CALENDARS_DB_HOST=${CALENDARS_DB_HOST}
      - CALENDARS_DB_NAME=${CALENDARS_DB_NAME}
      - CALENDARS_DB_USER=${APP_DB_USER}
      - CALENDARS_DB_PASSWORD=${APP_DB_PASSWORD}
      - CALENDARS_DB_PORT=5432

  auth-db:
    container_name: microservices-auth-db
    hostname: db
    image: postgres:16.2-bookworm
    ports:
      - "127.0.0.1:5432:5432"
    healthcheck:
      test: "pg_isready -U '${APP_DB_USER}' -d '${AUTH_DB_NAME}' || exit 1"
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      auth-db:
        aliases: ["${AUTH_DB_HOST?}"]
    volumes:
      - ./db/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./db/auth_db/init.sql:/docker-entrypoint-initdb.d/init.sql
      - db-auth-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${APP_DB_USER}
      - POSTGRES_PASSWORD=${APP_DB_PASSWORD}
      - POSTGRES_DB=${AUTH_DB_NAME}

  events-db:
    container_name: microservices-events-db
    hostname: db
    image: postgres:16.2-bookworm
    ports:
      - "127.0.0.1:5433:5432"
    healthcheck:
      test: "pg_isready -U '${APP_DB_USER}' -d '${EVENTS_DB_NAME}' || exit 1"
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      events-db:
        aliases: ["${EVENTS_DB_HOST?}"]
    volumes:
      - ./db/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./db/events_db/init.sql:/docker-entrypoint-initdb.d/init.sql
      - db-events-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${APP_DB_USER}
      - POSTGRES_PASSWORD=${APP_DB_PASSWORD}
      - POSTGRES_DB=${EVENTS_DB_NAME}

  invites-db:
    container_name: microservices-invites-db
    hostname: db
    image: postgres:16.2-bookworm
    ports:
      - "127.0.0.1:5434:5432"
    healthcheck:
      test: "pg_isready -U '${APP_DB_USER}' -d '${INVITES_DB_NAME}' || exit 1"
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      invites-db:
        aliases: ["${INVITES_DB_HOST?}"]
    volumes:
      - ./db/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./db/invites_db/init.sql:/docker-entrypoint-initdb.d/init.sql
      - db-invites-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${APP_DB_USER}
      - POSTGRES_PASSWORD=${APP_DB_PASSWORD}
      - POSTGRES_DB=${INVITES_DB_NAME}

  rsvp-db:
    container_name: microservices-rsvp-db
    hostname: db
    image: postgres:16.2-bookworm
    ports:
      - "127.0.0.1:5435:5432"
    healthcheck:
      test: "pg_isready -U '${APP_DB_USER}' -d '${RSVP_DB_NAME}' || exit 1"
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      rsvp-db:
        aliases: ["${RSVP_DB_HOST?}"]
    volumes:
      - ./db/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./db/rsvp_db/init.sql:/docker-entrypoint-initdb.d/init.sql
      - db-rsvp-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${APP_DB_USER}
      - POSTGRES_PASSWORD=${APP_DB_PASSWORD}
      - POSTGRES_DB=${RSVP_DB_NAME}

  calendars-db:
    container_name: microservices-calendars-db
    hostname: db
    image: postgres:16.2-bookworm
    ports:
      - "127.0.0.1:5436:5432"
    healthcheck:
      test: "pg_isready -U '${APP_DB_USER}' -d '${CALENDARS_DB_NAME}' || exit 1"
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      calendars-db:
        aliases: ["${CALENDARS_DB_HOST?}"]
    volumes:
      - ./db/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./db/calendars_db/init.sql:/docker-entrypoint-initdb.d/init.sql
      - db-calendars-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${APP_DB_USER}
      - POSTGRES_PASSWORD=${APP_DB_PASSWORD}
      - POSTGRES_DB=${CALENDARS_DB_NAME}

networks:
  host: {}
  backend:
    internal: true
  auth-db:
    internal: true
  events-db:
    internal: true
  invites-db:
    internal: true
  rsvp-db:
    internal: true
  calendars-db:
    internal: true

volumes:
  db-auth-data: {}
  db-events-data: {}
  db-invites-data: {}
  db-rsvp-data: {}
  db-calendars-data: {}
