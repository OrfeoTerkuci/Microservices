name: microservices
services:
  # Legacy frontend
  # frontend_legacy:
  #   container_name: frontend_legacy
  #   build: ./frontend_legacy
  #   ports:
  #     - "127.0.0.1:5000:5000"
  # depends_on:
  #   db:
  #     condition: service_healthy

  frontend:
    container_name: frontend
    build: ./
    command: ["bash", "-c", "npm install && npm run dev"]
    ports:
      - 8080:8080
    volumes:
      - ./frontend:/frontend
    # Override the default stop signal
    stop_signal: SIGKILL
    # depends_on:
    #   db:
    #     condition: service_healthy

  users-db:
    container_name: microservices-users-db
    hostname: db
    image: postgres:16.2-bookworm
    ports:
      - "127.0.0.1:5432:5432"
    healthcheck:
      test: "pg_isready -U '${APP_DB_USER}' -d '${USERS_DB_NAME}' || exit 1"
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - host
    volumes:
      - ./db/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./db/users_db/init.sql:/docker-entrypoint-initdb.d/init.sql
      - db-users-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${APP_DB_USER}
      - POSTGRES_PASSWORD=${APP_DB_PASSWORD}
      - POSTGRES_DB=${USERS_DB_NAME}

  events-db:
    container_name: microservices-events-db
    hostname: db
    image: postgres:16.2-bookworm
    ports:
      - "127.0.0.1:5433:5432"
    healthcheck:
      test: "pg_isready -U '${APP_DB_USER}' -d '${EVENTS_DB_NAME}' || exit 1"
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - host
    volumes:
      - ./db/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./db/events_db/init.sql:/docker-entrypoint-initdb.d/init.sql
      - db-events-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${APP_DB_USER}
      - POSTGRES_PASSWORD=${APP_DB_PASSWORD}
      - POSTGRES_DB=${EVENTS_DB_NAME}

  invites-db:
    container_name: microservices-invites-db
    hostname: db
    image: postgres:16.2-bookworm
    ports:
      - "127.0.0.1:5434:5432"
    healthcheck:
      test: "pg_isready -U '${APP_DB_USER}' -d '${INVITES_DB_NAME}' || exit 1"
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - host
    volumes:
      - ./db/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./db/invites_db/init.sql:/docker-entrypoint-initdb.d/init.sql
      - db-invites-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${APP_DB_USER}
      - POSTGRES_PASSWORD=${APP_DB_PASSWORD}
      - POSTGRES_DB=${INVITES_DB_NAME}

  participation-db:
    container_name: microservices-participation-db
    hostname: db
    image: postgres:16.2-bookworm
    ports:
      - "127.0.0.1:5435:5432"
    healthcheck:
      test: "pg_isready -U '${APP_DB_USER}' -d '${PARTICIPATION_DB_NAME}' || exit 1"
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - host
    volumes:
      - ./db/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./db/participation_db/init.sql:/docker-entrypoint-initdb.d/init.sql
      - db-participation-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${APP_DB_USER}
      - POSTGRES_PASSWORD=${APP_DB_PASSWORD}
      - POSTGRES_DB=${PARTICIPATION_DB_NAME}

  calendars-db:
    container_name: microservices-calendars-db
    hostname: db
    image: postgres:16.2-bookworm
    ports:
      - "127.0.0.1:5436:5432"
    healthcheck:
      test: "pg_isready -U '${APP_DB_USER}' -d '${CALENDARS_DB_NAME}' || exit 1"
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - host
    volumes:
      - ./db/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./db/calendars_db/init.sql:/docker-entrypoint-initdb.d/init.sql
      - db-calendars-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${APP_DB_USER}
      - POSTGRES_PASSWORD=${APP_DB_PASSWORD}
      - POSTGRES_DB=${CALENDARS_DB_NAME}

networks:
  host: {}

volumes:
  db-users-data: {}
  db-events-data: {}
  db-invites-data: {}
  db-participation-data: {}
  db-calendars-data: {}
